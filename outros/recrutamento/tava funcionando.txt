## code.gs #####################################################################################

// Configura√ß√µes globais
const CONFIG = {
  pastaDriveAdmin: 'Curr√≠culos Administrativos',
  pastaDriveDocentes: 'Curr√≠culos Docentes',
  emailNotificacao: 'nicole@fam.br',
  emailTeste: 'nicole@fam.br',
  planilhaAdmin: 'Candidatos_Administrativos',
  planilhaDocentes: 'Candidatos_Docentes'
};

function doGet() {
  return HtmlService.createHtmlOutputFromFile('formulario');
}

function processarVagaAdministrativa(dados) {
  try {
    console.log('Processando vaga administrativa:', dados.nome);
    
    const pasta = criarPastaSeNaoExistir(CONFIG.pastaDriveAdmin);
    let linkArquivo = '';
    
    // Upload do arquivo (se houver)
    if (dados.arquivo && dados.arquivo.data) {
      try {
        const blob = Utilities.newBlob(
          Utilities.base64Decode(dados.arquivo.data),
          dados.arquivo.mimeType,
          dados.arquivo.name
        );
        
        const nomeArquivo = dados.nome + '_' + new Date().getTime() + '_' + dados.arquivo.name;
        const arquivoDrive = pasta.createFile(blob.setName(nomeArquivo));
        linkArquivo = arquivoDrive.getUrl();
        console.log('Arquivo salvo:', nomeArquivo);
      } catch (error) {
        console.error('Erro ao salvar arquivo:', error);
      }
    }
    
    // Salvar na planilha
    const planilha = criarPlanilhaSeNaoExistir(CONFIG.planilhaAdmin, [
      'Data Cadastro', 'Nome Completo', 'CPF', 'Telefone', 'Email', 'Endere√ßo', 
      '√Årea de Interesse', 'Link Curr√≠culo'
    ]);
    
    const sheet = planilha.getSheets()[0];
    const dataCadastro = new Date();
    
    sheet.appendRow([
      dataCadastro,
      dados.nome || '',
      dados.cpf || '',
      dados.telefone || '',
      dados.email || '',
      dados.endereco || '',
      dados.areaInteresse || '',
      linkArquivo
    ]);
    
    console.log('Dados salvos na planilha para:', dados.nome);
    
    // Enviar notifica√ß√£o
    enviarEmailNotificacao({
      tipo: 'Administrativa',
      nome: dados.nome || '',
      email: dados.email || '',
      telefone: dados.telefone || '',
      area: dados.areaInteresse || '',
      linkArquivo: linkArquivo,
      destinatario: CONFIG.emailNotificacao
    });
    
    return { success: true, message: 'Candidatura enviada com sucesso!' };
    
  } catch (error) {
    console.error('Erro ao processar vaga administrativa:', error);
    return { success: false, message: 'Erro ao processar formul√°rio: ' + error.message };
  }
}

function processarVagaDocente(dados) {
  try {
    console.log('Processando vaga docente:', dados.nome);
    
    const pasta = criarPastaSeNaoExistir(CONFIG.pastaDriveDocentes);
    let linkArquivo = '';
    
    // Upload do arquivo (se houver)
    if (dados.arquivo && dados.arquivo.data) {
      try {
        const blob = Utilities.newBlob(
          Utilities.base64Decode(dados.arquivo.data),
          dados.arquivo.mimeType,
          dados.arquivo.name
        );
        
        const nomeArquivo = dados.nome + '_' + new Date().getTime() + '_' + dados.arquivo.name;
        const arquivoDrive = pasta.createFile(blob.setName(nomeArquivo));
        linkArquivo = arquivoDrive.getUrl();
        console.log('Arquivo salvo:', nomeArquivo);
      } catch (error) {
        console.error('Erro ao salvar arquivo:', error);
      }
    }
    
    // Salvar na planilha
    const planilha = criarPlanilhaSeNaoExistir(CONFIG.planilhaDocentes, [
      'Data Cadastro', 'Nome Completo', 'CPF', 'Telefone', 'Email', 'Endere√ßo', 
      '√Årea de Interesse', 'Link Lattes', 'Link Curr√≠culo'
    ]);
    
    const sheet = planilha.getSheets()[0];
    const dataCadastro = new Date();
    
    sheet.appendRow([
      dataCadastro,
      dados.nome || '',
      dados.cpf || '',
      dados.telefone || '',
      dados.email || '',
      dados.endereco || '',
      dados.areaInteresse || '',
      dados.lattes || '',
      linkArquivo
    ]);
    
    console.log('Dados salvos na planilha para:', dados.nome);
    
    // Enviar notifica√ß√£o
    enviarEmailNotificacao({
      tipo: 'Docente',
      nome: dados.nome || '',
      email: dados.email || '',
      telefone: dados.telefone || '',
      area: dados.areaInteresse || '',
      linkLattes: dados.lattes || '',
      linkArquivo: linkArquivo,
      destinatario: CONFIG.emailNotificacao
    });
    
    return { success: true, message: 'Candidatura enviada com sucesso!' };
    
  } catch (error) {
    console.error('Erro ao processar vaga docente:', error);
    return { success: false, message: 'Erro ao processar formul√°rio: ' + error.message };
  }
}

function criarPastaSeNaoExistir(nomePasta) {
  const pastas = DriveApp.getFoldersByName(nomePasta);
  if (pastas.hasNext()) {
    return pastas.next();
  } else {
    return DriveApp.createFolder(nomePasta);
  }
}

function criarPlanilhaSeNaoExistir(nomePlanilha, cabecalhos) {
  const arquivos = DriveApp.getFilesByName(nomePlanilha);
  let planilha;
  
  if (arquivos.hasNext()) {
    planilha = SpreadsheetApp.open(arquivos.next());
  } else {
    planilha = SpreadsheetApp.create(nomePlanilha);
    const sheet = planilha.getSheets()[0];
    sheet.appendRow(cabecalhos);
    
    // Formatar cabe√ßalhos
    const range = sheet.getRange(1, 1, 1, cabecalhos.length);
    range.setBackground('#4285f4').setFontColor('white').setFontWeight('bold');
    
    // Ajustar larguras das colunas
    for (let i = 1; i <= cabecalhos.length; i++) {
      sheet.autoResizeColumn(i);
    }
  }
  
  return planilha;
}

function enviarEmailNotificacao(dados) {
  try {
    const assunto = 'Novo candidato para vaga ' + dados.tipo + ' - ' + dados.nome;
    
    let corpo = '<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">';
    corpo += '<h2 style="color: #4285f4; border-bottom: 2px solid #4285f4; padding-bottom: 10px;">Novo candidato cadastrado</h2>';
    corpo += '<div style="background-color: #f9f9f9; padding: 20px; border-radius: 5px; margin: 20px 0;">';
    corpo += '<p><strong>Tipo de vaga:</strong> ' + dados.tipo + '</p>';
    corpo += '<p><strong>Nome:</strong> ' + dados.nome + '</p>';
    corpo += '<p><strong>Email:</strong> ' + dados.email + '</p>';
    corpo += '<p><strong>Telefone:</strong> ' + dados.telefone + '</p>';
    corpo += '<p><strong>√Årea de interesse:</strong> ' + (dados.area || 'N√£o informado') + '</p>';
    corpo += '</div>';
    
    if (dados.tipo === 'Docente' && dados.linkLattes) {
      corpo += '<div style="background-color: #e8f4fd; padding: 15px; border-radius: 5px; margin: 20px 0;">';
      corpo += '<p><strong>üéì Link Lattes:</strong> <a href="' + dados.linkLattes + '" target="_blank">' + dados.linkLattes + '</a></p>';
      corpo += '</div>';
    }
    
    if (dados.linkArquivo) {
      corpo += '<div style="background-color: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0;">';
      corpo += '<p><strong>üìÑ Curr√≠culo:</strong> <a href="' + dados.linkArquivo + '" target="_blank" style="color: #856404; font-weight: bold;">Acessar arquivo</a></p>';
      corpo += '</div>';
    }
    
    const dataHora = new Date().toLocaleString('pt-BR');
    corpo += '<div style="border-top: 1px solid #ddd; padding-top: 15px; margin-top: 30px; color: #666;">';
    corpo += '<p><strong>Data do cadastro:</strong> ' + dataHora + '</p>';
    corpo += '<p><em>Este email foi gerado automaticamente pelo sistema de vagas.</em></p>';
    corpo += '</div>';
    corpo += '</div>';
    
    GmailApp.sendEmail(dados.destinatario, assunto, '', {
      htmlBody: corpo
    });
    
    console.log('Email enviado com sucesso para:', dados.destinatario);
  } catch (error) {
    console.error('Erro ao enviar email:', error);
  }
}

function getAreasAdministrativas() {
  return [
    'Biblioteca',
    'Recep√ß√£o',
    'Secretaria',
    'Financeiro',
    'RH',
    'TI',
    'Manuten√ß√£o',
    'Limpeza',
    'Seguran√ßa',
    'Marketing',
    'Coordena√ß√£o'
  ];
}

function getAreasDocentes() {
  return [
    'Administra√ß√£o',
    'Direito',
    'Pedagogia',
    'Psicologia',
    'Enfermagem',
    'Medicina',
    'Odontologia',
    'Nutri√ß√£o',
    'Fisioterapia',
    'Educa√ß√£o F√≠sica',
    'Engenharia',
    'Ci√™ncias Cont√°beis'
  ];
}

function testarSistema() {
  try {
    console.log('Iniciando teste do sistema...');
    
    console.log('Testando cria√ß√£o de pastas...');
    const pastaAdmin = criarPastaSeNaoExistir(CONFIG.pastaDriveAdmin);
    const pastaDocente = criarPastaSeNaoExistir(CONFIG.pastaDriveDocentes);
    
    console.log('Testando cria√ß√£o de planilhas...');
    const planilhaAdmin = criarPlanilhaSeNaoExistir(CONFIG.planilhaAdmin, [
      'Data Cadastro', 'Nome Completo', 'CPF', 'Telefone', 'Email', 'Endere√ßo', 
      '√Årea de Interesse', 'Link Curr√≠culo'
    ]);
    
    const planilhaDocente = criarPlanilhaSeNaoExistir(CONFIG.planilhaDocentes, [
      'Data Cadastro', 'Nome Completo', 'CPF', 'Telefone', 'Email', 'Endere√ßo', 
      '√Årea de Interesse', 'Link Lattes', 'Link Curr√≠culo'
    ]);
    
    console.log('Teste conclu√≠do com sucesso!');
    console.log('Pasta Admin ID:', pastaAdmin.getId());
    console.log('Pasta Docente ID:', pastaDocente.getId());
    console.log('Planilha Admin ID:', planilhaAdmin.getId());
    console.log('Planilha Docente ID:', planilhaDocente.getId());
    
    const areasAdmin = getAreasAdministrativas();
    const areasDocente = getAreasDocentes();
    console.log('√Åreas administrativas carregadas:', areasAdmin.length);
    console.log('√Åreas docentes carregadas:', areasDocente.length);
    
    return {
      success: true,
      message: 'Sistema testado com sucesso!',
      detalhes: {
        pastaAdminId: pastaAdmin.getId(),
        pastaDocenteId: pastaDocente.getId(),
        planilhaAdminId: planilhaAdmin.getId(),
        planilhaDocenteId: planilhaDocente.getId(),
        areasAdmin: areasAdmin.length,
        areasDocente: areasDocente.length
      }
    };
  } catch (error) {
    console.error('Erro no teste:', error);
    return {
      success: false,
      message: 'Erro no teste: ' + error.message,
      erro: error.toString()
    };
  }
}

function adicionarDadosTeste() {
  try {
    console.log('Adicionando dados de teste...');
    
    const planilhaAdmin = criarPlanilhaSeNaoExistir(CONFIG.planilhaAdmin, [
      'Data Cadastro', 'Nome Completo', 'CPF', 'Telefone', 'Email', 'Endere√ßo', 
      '√Årea de Interesse', 'Link Curr√≠culo'
    ]);
    
    const planilhaDocente = criarPlanilhaSeNaoExistir(CONFIG.planilhaDocentes, [
      'Data Cadastro', 'Nome Completo', 'CPF', 'Telefone', 'Email', 'Endere√ßo', 
      '√Årea de Interesse', 'Link Lattes', 'Link Curr√≠culo'
    ]);
    
    const sheet1 = planilhaAdmin.getSheets()[0];
    const sheet2 = planilhaDocente.getSheets()[0];
    
    const agora = new Date();
    sheet1.appendRow([
      agora,
      'Teste Administrativo',
      '000.000.000-00',
      '(00) 00000-0000',
      'teste@admin.com',
      'Endere√ßo Teste',
      'TI',
      'Link teste'
    ]);
    
    sheet2.appendRow([
      agora,
      'Teste Docente',
      '111.111.111-11',
      '(11) 11111-1111',
      'teste@docente.com',
      'Endere√ßo Teste Docente',
      'Administra√ß√£o',
      'https://lattes.cnpq.br/teste',
      'Link curriculo teste'
    ]);
    
    console.log('Dados de teste adicionados com sucesso!');
    return { success: true, message: 'Dados de teste adicionados!' };
    
  } catch (error) {
    console.error('Erro ao adicionar dados de teste:', error);
    return { success: false, message: 'Erro: ' + error.message };
  }
}

## formulario.html #####################################################################################

<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formul√°rio de Vagas</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
      }
      
      .container {
        background-color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }
      
      h1 {
        color: #333;
        text-align: center;
        margin-bottom: 30px;
      }
      
      .tabs {
        display: flex;
        margin-bottom: 30px;
        border-bottom: 2px solid #ddd;
      }
      
      .tab {
        padding: 15px 25px;
        cursor: pointer;
        background-color: #f0f0f0;
        border: none;
        font-size: 16px;
        font-weight: bold;
        transition: all 0.3s;
      }
      
      .tab.active {
        background-color: #4285f4;
        color: white;
      }
      
      .form-section {
        display: none;
      }
      
      .form-section.active {
        display: block;
      }
      
      .form-group {
        margin-bottom: 20px;
      }
      
      label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #555;
      }
      
      input[type="text"],
      input[type="email"],
      input[type="tel"],
      input[type="url"],
      select,
      textarea {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
        box-sizing: border-box;
      }
      
      input[type="file"] {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
      }
      
      .checkbox-group {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
      }
      
      .checkbox-item {
        margin-bottom: 10px;
      }
      
      .checkbox-item input[type="checkbox"] {
        width: auto;
        margin-right: 10px;
      }
      
      .submit-btn {
        background-color: #4285f4;
        color: white;
        padding: 15px 30px;
        border: none;
        border-radius: 5px;
        font-size: 18px;
        cursor: pointer;
        width: 100%;
        font-weight: bold;
        transition: background-color 0.3s;
      }
      
      .submit-btn:hover:not(:disabled) {
        background-color: #3367d6;
      }
      
      .submit-btn:disabled {
        background-color: #ccc;
        cursor: not-allowed;
      }
      
      .message {
        padding: 15px;
        margin: 20px 0;
        border-radius: 5px;
        text-align: center;
        display: none;
      }
      
      .success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
      }
      
      .error {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
      }
      
      .required {
        color: red;
      }
      
      .file-info {
        margin-top: 5px;
        font-size: 14px;
        color: #666;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Formul√°rio de Vagas</h1>
      
      <div class="tabs">
        <button class="tab active" onclick="mostrarFormulario('administrativo')">Vagas Administrativas</button>
        <button class="tab" onclick="mostrarFormulario('docente')">Vagas Docentes</button>
      </div>
      
      <!-- Formul√°rio Administrativo -->
      <div id="form-administrativo" class="form-section active">
        <form id="formAdmin">
          <input type="hidden" name="tipoVaga" value="administrativo">
          
          <div class="form-group">
            <label for="nomeAdmin">Nome completo <span class="required">*</span></label>
            <input type="text" id="nomeAdmin" name="nome" required>
          </div>
          
          <div class="form-group">
            <label for="cpfAdmin">CPF <span class="required">*</span></label>
            <input type="text" id="cpfAdmin" name="cpf" required placeholder="000.000.000-00">
          </div>
          
          <div class="form-group">
            <label for="telefoneAdmin">Telefone <span class="required">*</span></label>
            <input type="tel" id="telefoneAdmin" name="telefone" required placeholder="(00) 00000-0000">
          </div>
          
          <div class="form-group">
            <label for="emailAdmin">Email <span class="required">*</span></label>
            <input type="email" id="emailAdmin" name="email" required>
          </div>
          
          <div class="form-group">
            <label for="enderecoAdmin">Endere√ßo <span class="required">*</span></label>
            <input type="text" id="enderecoAdmin" name="endereco" required>
          </div>
          
          <div class="form-group">
            <label>√Årea de interesse <span class="required">*</span></label>
            <div class="checkbox-group" id="areasAdministrativas">
              <!-- √Åreas ser√£o carregadas dinamicamente -->
            </div>
          </div>
          
          <div class="form-group">
            <label for="arquivoAdmin">Envie seu curr√≠culo <span class="required">*</span></label>
            <input type="file" id="arquivoAdmin" name="arquivo" accept=".pdf,.doc,.docx" required>
            <div class="file-info">Formatos aceitos: PDF, DOC, DOCX (m√°x. 10MB)</div>
          </div>
          
          <button type="submit" class="submit-btn">Enviar Candidatura</button>
        </form>
      </div>
      
      <!-- Formul√°rio Docente -->
      <div id="form-docente" class="form-section">
        <form id="formDocente">
          <input type="hidden" name="tipoVaga" value="docente">
          
          <div class="form-group">
            <label for="nomeDocente">Nome completo <span class="required">*</span></label>
            <input type="text" id="nomeDocente" name="nome" required>
          </div>
          
          <div class="form-group">
            <label for="cpfDocente">CPF <span class="required">*</span></label>
            <input type="text" id="cpfDocente" name="cpf" required placeholder="000.000.000-00">
          </div>
          
          <div class="form-group">
            <label for="telefoneDocente">Telefone <span class="required">*</span></label>
            <input type="tel" id="telefoneDocente" name="telefone" required placeholder="(00) 00000-0000">
          </div>
          
          <div class="form-group">
            <label for="emailDocente">Email <span class="required">*</span></label>
            <input type="email" id="emailDocente" name="email" required>
          </div>
          
          <div class="form-group">
            <label for="enderecoDocente">Endere√ßo <span class="required">*</span></label>
            <input type="text" id="enderecoDocente" name="endereco" required>
          </div>
          
          <div class="form-group">
            <label>√Årea de interesse <span class="required">*</span></label>
            <div class="checkbox-group" id="areasDocentes">
              <!-- √Åreas ser√£o carregadas dinamicamente -->
            </div>
          </div>
          
          <div class="form-group">
            <label for="lattesDocente">Link do Lattes</label>
            <input type="url" id="lattesDocente" name="lattes" placeholder="https://lattes.cnpq.br/...">
          </div>
          
          <div class="form-group">
            <label for="arquivoDocente">Envie seu curr√≠culo <span class="required">*</span></label>
            <input type="file" id="arquivoDocente" name="arquivo" accept=".pdf,.doc,.docx" required>
            <div class="file-info">Formatos aceitos: PDF, DOC, DOCX (m√°x. 10MB)</div>
          </div>
          
          <button type="submit" class="submit-btn">Enviar Candidatura</button>
        </form>
      </div>
      
      <div id="message" class="message"></div>
    </div>

    <script>
      // Carregar √°reas quando a p√°gina carregar
      google.script.run.withSuccessHandler(carregarAreas).getAreasAdministrativas();
      google.script.run.withSuccessHandler(carregarAreasDocentes).getAreasDocentes();
      
      function carregarAreas(areas) {
        const container = document.getElementById('areasAdministrativas');
        container.innerHTML = '';
        areas.forEach(area => {
          const div = document.createElement('div');
          div.className = 'checkbox-item';
          div.innerHTML = `
            <input type="checkbox" name="areaInteresse" value="${area}" id="area_${area.replace(/\s+/g, '_')}">
            <label for="area_${area.replace(/\s+/g, '_')}">${area}</label>
          `;
          container.appendChild(div);
        });
      }
      
      function carregarAreasDocentes(areas) {
        const container = document.getElementById('areasDocentes');
        container.innerHTML = '';
        areas.forEach(area => {
          const div = document.createElement('div');
          div.className = 'checkbox-item';
          div.innerHTML = `
            <input type="checkbox" name="areaInteresse" value="${area}" id="doc_area_${area.replace(/\s+/g, '_')}">
            <label for="doc_area_${area.replace(/\s+/g, '_')}">${area}</label>
          `;
          container.appendChild(div);
        });
      }
      
      function mostrarFormulario(tipo) {
        // Atualizar tabs
        document.querySelectorAll('.tab').forEach(tab => {
          tab.classList.remove('active');
        });
        event.target.classList.add('active');
        
        // Mostrar formul√°rio correto
        document.querySelectorAll('.form-section').forEach(section => {
          section.classList.remove('active');
        });
        document.getElementById(`form-${tipo}`).classList.add('active');
      }
      
      // Manipular envio dos formul√°rios
      document.getElementById('formAdmin').addEventListener('submit', function(e) {
        e.preventDefault();
        enviarFormulario(this);
      });
      
      document.getElementById('formDocente').addEventListener('submit', function(e) {
        e.preventDefault();
        enviarFormulario(this);
      });
      
      function enviarFormulario(form) {
        // Prevenir m√∫ltiplos envios
        const submitBtn = form.querySelector('.submit-btn');
        if (submitBtn.disabled) return;
        
        submitBtn.disabled = true;
        submitBtn.textContent = 'Enviando...';
        
        mostrarMensagem('Enviando formul√°rio...', 'info');
        
        // Validar √°reas selecionadas
        const areasSelecionadas = [];
        form.querySelectorAll('input[name="areaInteresse"]:checked').forEach(checkbox => {
          areasSelecionadas.push(checkbox.value);
        });
        
        if (areasSelecionadas.length === 0) {
          mostrarMensagem('Por favor, selecione pelo menos uma √°rea de interesse.', 'error');
          submitBtn.disabled = false;
          submitBtn.textContent = 'Enviar Candidatura';
          return;
        }
        
        // Validar arquivo
        const arquivoInput = form.querySelector('input[type="file"]');
        if (!arquivoInput.files || arquivoInput.files.length === 0) {
          mostrarMensagem('Por favor, selecione um arquivo de curr√≠culo.', 'error');
          submitBtn.disabled = false;
          submitBtn.textContent = 'Enviar Candidatura';
          return;
        }
        
        const arquivo = arquivoInput.files[0];
        
        // Validar tamanho do arquivo (10MB)
        if (arquivo.size > 10 * 1024 * 1024) {
          mostrarMensagem('O arquivo deve ter no m√°ximo 10MB.', 'error');
          submitBtn.disabled = false;
          submitBtn.textContent = 'Enviar Candidatura';
          return;
        }
        
        // Converter arquivo para base64
        const reader = new FileReader();
        reader.onload = function(e) {
          const dados = {
            tipoVaga: form.querySelector('input[name="tipoVaga"]').value,
            nome: form.querySelector('input[name="nome"]').value,
            cpf: form.querySelector('input[name="cpf"]').value,
            telefone: form.querySelector('input[name="telefone"]').value,
            email: form.querySelector('input[name="email"]').value,
            endereco: form.querySelector('input[name="endereco"]').value,
            areaInteresse: areasSelecionadas.join(', '),
            arquivo: {
              name: arquivo.name,
              data: e.target.result.split(',')[1], // Remove o prefixo data:...;base64,
              mimeType: arquivo.type
            }
          };
          
          // Adicionar lattes se for docente
          const lattesInput = form.querySelector('input[name="lattes"]');
          if (lattesInput) {
            dados.lattes = lattesInput.value;
          }
          
          // Determinar qual fun√ß√£o chamar
          const funcaoProcessar = dados.tipoVaga === 'administrativo' ? 
            'processarVagaAdministrativa' : 'processarVagaDocente';
          
          google.script.run
            .withSuccessHandler(function(result) {
              submitBtn.disabled = false;
              submitBtn.textContent = 'Enviar Candidatura';
              
              if (result && result.success) {
                mostrarMensagem(result.message, 'success');
                form.reset();
                // Limpar checkboxes
                form.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
              } else {
                mostrarMensagem(result?.message || 'Erro ao enviar formul√°rio', 'error');
              }
            })
            .withFailureHandler(function(error) {
              console.error('Erro:', error);
              submitBtn.disabled = false;
              submitBtn.textContent = 'Enviar Candidatura';
              mostrarMensagem('Erro ao enviar formul√°rio. Tente novamente.', 'error');
            })
            [funcaoProcessar](dados);
        };
        
        reader.onerror = function() {
          mostrarMensagem('Erro ao ler o arquivo. Tente novamente.', 'error');
          submitBtn.disabled = false;
          submitBtn.textContent = 'Enviar Candidatura';
        };
        
        reader.readAsDataURL(arquivo);
      }
      
      function mostrarMensagem(texto, tipo) {
        const messageDiv = document.getElementById('message');
        messageDiv.textContent = texto;
        
        // Limpar classes anteriores
        messageDiv.className = 'message';
        
        // Adicionar classe do tipo
        if (tipo === 'success') {
          messageDiv.classList.add('success');
        } else if (tipo === 'error') {
          messageDiv.classList.add('error');
        } else {
          // Para 'info' ou outros tipos
          messageDiv.style.backgroundColor = '#d1ecf1';
          messageDiv.style.color = '#0c5460';
          messageDiv.style.border = '1px solid #bee5eb';
        }
        
        messageDiv.style.display = 'block';
        
        // Auto-esconder mensagens de sucesso ap√≥s 5 segundos
        if (tipo === 'success') {
          setTimeout(() => {
            messageDiv.style.display = 'none';
          }, 5000);
        }
        
        // Rolar para a mensagem
        messageDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    </script>
  </body>
</html>
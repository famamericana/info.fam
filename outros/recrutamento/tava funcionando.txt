// CONFIGURAÇÃO - Substitua pelos seus valores EXATOS
const CONFIG = {
  pastaPrincipal: 'Quero Trabalhar na FAM',
  pastaDriveAdmin: 'Currículos Administrativos',
  pastaDriveDocentes: 'Currículos Docentes',
  emailNotificacaoAdmin: 'recrutamento@fam.br',
  emailNotificacaoDocentes: 'recrutamento@fam.br',
  planilhaAdmin: 'Candidatos_Administrativos',
  planilhaDocentes: 'Candidatos_Docentes'
};

const HEADERS = {
  administrativo: [
    'Data/Hora Envio',
    'Nome Completo',
    'CPF',
    'Telefone',
    'Email',
    'Endereço',
    'Área de Interesse',
    'Link do Currículo',
    'Observações'
  ],
  docente: [
    'Data/Hora Envio',
    'Nome Completo',
    'CPF',
    'Telefone',
    'Email',
    'Endereço',
    'Área de Interesse',
    'Link do Lattes',
    'Link do Currículo',
    'Observações'
  ]
};

// Variáveis globais para armazenar IDs e objetos (cache)
let cache = {
  folderIds: {},
  spreadsheetIds: {},
  mainFolderId: null
};

/**
 * Função para obter o ID da pasta principal, criando se não existir.
 * @return {string} ID da pasta principal.
 */
function getMainFolderId() {
  if (cache.mainFolderId) {
    console.log(`[CACHE] Pasta principal encontrada no cache: ${cache.mainFolderId}`);
    return cache.mainFolderId;
  }

  try {
    const folders = DriveApp.getFoldersByName(CONFIG.pastaPrincipal);
    
    if (folders.hasNext()) {
      const folder = folders.next();
      cache.mainFolderId = folder.getId();
      console.log(`[ENCONTRADO] Pasta principal '${CONFIG.pastaPrincipal}' com ID: ${cache.mainFolderId}`);
      return cache.mainFolderId;
    } else {
      // Cria a pasta principal se não existir
      console.log(`[CRIANDO] Criando pasta principal: ${CONFIG.pastaPrincipal}`);
      const mainFolder = DriveApp.createFolder(CONFIG.pastaPrincipal);
      cache.mainFolderId = mainFolder.getId();
      console.log(`[CRIADA] Pasta principal criada com ID: ${cache.mainFolderId}`);
      return cache.mainFolderId;
    }
  } catch (error) {
    console.error('[ERRO] Exceção ao buscar/criar pasta principal:', error.toString());
    return null;
  }
}

/**
 * Função para obter o ID de uma pasta pelo nome DENTRO da pasta principal, criando se não existir.
 * @param {string} folderName - Nome da pasta.
 * @return {string} ID da pasta.
 */
function getFolderIdByName(folderName) {
  if (cache.folderIds[folderName]) {
    console.log(`[CACHE] Pasta '${folderName}' encontrada no cache: ${cache.folderIds[folderName]}`);
    return cache.folderIds[folderName];
  }

  try {
    const mainFolderId = getMainFolderId();
    if (!mainFolderId) {
      throw new Error('Não foi possível acessar ou criar a pasta principal');
    }

    const mainFolder = DriveApp.getFolderById(mainFolderId);
    const folders = mainFolder.getFoldersByName(folderName);
    
    if (folders.hasNext()) {
      const folder = folders.next();
      cache.folderIds[folderName] = folder.getId();
      console.log(`[ENCONTRADO] Pasta '${folderName}' com ID: ${cache.folderIds[folderName]}`);
      return cache.folderIds[folderName];
    } else {
      // Cria a pasta se não existir
      console.log(`[CRIANDO] Criando pasta: ${folderName}`);
      const newFolder = mainFolder.createFolder(folderName);
      cache.folderIds[folderName] = newFolder.getId();
      console.log(`[CRIADA] Pasta '${folderName}' criada com ID: ${cache.folderIds[folderName]}`);
      return cache.folderIds[folderName];
    }
  } catch (error) {
    console.error('[ERRO] Exceção ao buscar/criar pasta:', error.toString());
    return null;
  }
}

/**
 * Função para obter o ID de uma planilha pelo nome DENTRO da pasta principal, criando se não existir.
 * @param {string} sheetName - Nome da planilha.
 * @return {string} ID da planilha.
 */
function getSpreadsheetIdByName(sheetName) {
  if (cache.spreadsheetIds[sheetName]) {
    console.log(`[CACHE] Planilha '${sheetName}' encontrada no cache: ${cache.spreadsheetIds[sheetName]}`);
    return cache.spreadsheetIds[sheetName];
  }

  try {
    const mainFolderId = getMainFolderId();
    if (!mainFolderId) {
      throw new Error('Não foi possível acessar ou criar a pasta principal');
    }

    const mainFolder = DriveApp.getFolderById(mainFolderId);
    const files = mainFolder.getFilesByName(sheetName);
    
    let fileId = null;
    
    while (files.hasNext()) {
      const file = files.next();
      if (file.getMimeType() === 'application/vnd.google-apps.spreadsheet') {
        fileId = file.getId();
        console.log(`[ENCONTRADO] Planilha '${sheetName}' com ID: ${fileId}`);
        break;
      }
    }

    if (fileId) {
      cache.spreadsheetIds[sheetName] = fileId;
      return fileId;
    } else {
      // Cria a planilha se não existir
      console.log(`[CRIANDO] Criando planilha: ${sheetName}`);
      const newSpreadsheet = SpreadsheetApp.create(sheetName);
      const file = DriveApp.getFileById(newSpreadsheet.getId());
      
      // Move a planilha para a pasta principal
      file.moveTo(mainFolder);
      
      cache.spreadsheetIds[sheetName] = file.getId();
      console.log(`[CRIADA] Planilha '${sheetName}' criada com ID: ${cache.spreadsheetIds[sheetName]}`);
      return cache.spreadsheetIds[sheetName];
    }
  } catch (error) {
    console.error('[ERRO] Exceção ao buscar/criar planilha:', error.toString());
    return null;
  }
}

/**
 * Função para obter o ID de uma planilha, sem criar caso não exista.
 * @param {string} sheetName - Nome da planilha.
 * @return {string|null} ID da planilha ou null se não encontrada.
 */
function getSpreadsheetIdIfExists(sheetName) {
  if (cache.spreadsheetIds[sheetName]) {
    return cache.spreadsheetIds[sheetName];
  }

  try {
    const mainFolderId = getMainFolderId();
    if (!mainFolderId) {
      return null;
    }

    const mainFolder = DriveApp.getFolderById(mainFolderId);
    const files = mainFolder.getFilesByName(sheetName);

    while (files.hasNext()) {
      const file = files.next();
      if (file.getMimeType() === 'application/vnd.google-apps.spreadsheet') {
        const fileId = file.getId();
        cache.spreadsheetIds[sheetName] = fileId;
        return fileId;
      }
    }
  } catch (error) {
    console.error('[ERRO] Exceção ao buscar planilha existente:', error.toString());
  }

  return null;
}

/**
 * Função para garantir que a planilha tenha os cabeçalhos corretos e formatados.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - Objeto da aba da planilha.
 * @param {Array<string>} headers - Array com os cabeçalhos esperados.
 */
function ensureHeaders(sheet, headers) {
  const cellA1Value = sheet.getRange('A1').getValue();
  const hasHeaders = cellA1Value !== '';

  console.log(`[ensureHeaders] Verificando cabeçalhos na aba '${sheet.getName()}'. Tem cabeçalhos? ${hasHeaders} (Baseado no valor de A1: '${cellA1Value}')`);
  console.log(`[ensureHeaders] Cabeçalhos esperados: ${JSON.stringify(headers)}`);

  if (!hasHeaders) {
    console.log(`[ensureHeaders] Inserindo cabeçalhos na aba '${sheet.getName()}'.`);
    
    // Insere os cabeçalhos
    const headerRange = sheet.getRange(1, 1, 1, headers.length);
    headerRange.setValues([headers]);
    
    // Formatação dos Cabeçalhos
    const headerRowRange = sheet.getRange(1, 1, 1, headers.length);
    
    // Define estilo
    headerRowRange.setFontWeight('bold');
    headerRowRange.setBackground('#4285f4');
    headerRowRange.setFontColor('#ffffff');
    headerRowRange.setBorder(true, true, true, true, true, true);
    
    // Ajusta a largura das colunas para melhor visualização
    sheet.autoResizeColumns(1, headers.length);
    
    SpreadsheetApp.flush();
    console.log(`[ensureHeaders] Cabeçalhos inseridos e formatados com sucesso.`);
  } else {
    console.log(`[ensureHeaders] Cabeçalhos já existem na aba '${sheet.getName()}'. Nenhuma ação necessária.`);
  }
}

/**
 * Função principal que recebe os dados do formulário via POST.
 * @param {GoogleAppsScript.Events.DoPost} e - Evento doPost.
 * @return {GoogleAppsScript.Content.TextOutput} Resposta HTTP.
 */
function doPost(e) {
  console.log('[doPost] Função doPost iniciada.');
  let lock;
  try {
    lock = LockService.getScriptLock();
    console.log('[doPost] Tentando adquirir lock...');
    const hasLock = lock.tryLock(30000);
    if (!hasLock) {
      throw new Error('Não foi possível adquirir o lock. Outra execução está em andamento.');
    }
    console.log('[doPost] Lock adquirido com sucesso.');

    console.log('[doPost] Conteúdo recebido:', e.postData.contents);
    const formData = JSON.parse(e.postData.contents);
    console.log('[doPost] Dados do formulário parseados:', JSON.stringify(formData, null, 2));

    const tipoVaga = formData.tipoVaga;
    console.log(`[doPost] Tipo de vaga determinado: ${tipoVaga}`);

    let folderId, spreadsheetId, headers, fileNamePrefix;

    if (tipoVaga === 'administrativo') {
      folderId = getFolderIdByName(CONFIG.pastaDriveAdmin);
      spreadsheetId = getSpreadsheetIdByName(CONFIG.planilhaAdmin);
      headers = HEADERS.administrativo;
      fileNamePrefix = 'Curriculo_Admin_';
    } else if (tipoVaga === 'docente') {
      folderId = getFolderIdByName(CONFIG.pastaDriveDocentes);
      spreadsheetId = getSpreadsheetIdByName(CONFIG.planilhaDocentes);
      headers = HEADERS.docente;
      fileNamePrefix = 'Curriculo_Docente_';
    } else {
      throw new Error(`Tipo de vaga inválido recebido: '${tipoVaga}'`);
    }

    if (!folderId) {
      throw new Error(`Não foi possível criar ou acessar a pasta para o tipo de vaga: ${tipoVaga}`);
    }
    if (!spreadsheetId) {
      throw new Error(`Não foi possível criar ou acessar a planilha para o tipo de vaga: ${tipoVaga}`);
    }

    console.log(`[doPost] IDs obtidos - Pasta: ${folderId}, Planilha: ${spreadsheetId}`);

    const ss = SpreadsheetApp.openById(spreadsheetId);
    console.log(`[doPost] Planilha aberta: ${ss.getName()}`);

    // Cria nome da aba com base APENAS NO ANO
    const currentYear = new Date().getFullYear().toString();
    const sheetName = currentYear;
    console.log(`[doPost] Nome da aba a ser usada/criada: ${sheetName}`);

    let sheet = ss.getSheetByName(sheetName);

    if (!sheet) {
      console.log(`[doPost] Aba '${sheetName}' não encontrada. Criando nova aba.`);
      sheet = ss.insertSheet(sheetName);
      console.log(`[doPost] Nova aba '${sheetName}' criada.`);
      SpreadsheetApp.flush();
    } else {
      console.log(`[doPost] Aba '${sheetName}' encontrada.`);
    }

    // Garante que os cabeçalhos estejam presentes e formatados
    ensureHeaders(sheet, headers);

    // Trata o upload do arquivo
    let fileUrl = '';
    if (formData.arquivo && formData.arquivo.name && formData.arquivo.type && formData.arquivo.data) {
      console.log(`[doPost] Arquivo recebido: ${formData.arquivo.name}`);
      const folder = DriveApp.getFolderById(folderId);
      const base64Match = formData.arquivo.data.match(/base64,(.*)$/);
      
      if (!base64Match || !base64Match[1]) {
        throw new Error('Dados do arquivo em formato Base64 inválidos.');
      }
      
      const base64Data = base64Match[1];
      const decodedData = Utilities.base64Decode(base64Data);
      const blob = Utilities.newBlob(decodedData, formData.arquivo.type, formData.arquivo.name);

      const timestamp = new Date().getTime();
      const safeNome = (formData.nomeCompleto || 'Desconhecido').replace(/[^a-zA-Z0-9-_ ]/g, '_');
      const uniqueFileName = `${fileNamePrefix}${safeNome}_${timestamp}_${formData.arquivo.name}`;

      console.log(`[doPost] Criando arquivo no Drive com nome: ${uniqueFileName}`);
      const file = folder.createFile(blob);
      file.setName(uniqueFileName);
      fileUrl = file.getUrl();
      console.log(`[doPost] Arquivo criado com sucesso. URL: ${fileUrl}`);
    } else if (tipoVaga === 'administrativo') {
      // Para administrativo, o arquivo é obrigatório
      console.error('[doPost] Erro: O upload do currículo é obrigatório para vagas administrativas, mas nenhum arquivo foi recebido.');
      throw new Error('O upload do currículo é obrigatório para vagas administrativas.');
    } else {
      console.log('[doPost] Nenhum arquivo recebido (não obrigatório para docentes).');
    }

    // Prepara os dados para a planilha
    const timestamp = new Date();
    let rowData;
    
    if (tipoVaga === 'administrativo') {
      rowData = [
        timestamp,
        formData.nomeCompleto || '',
        formData.cpf || '',
        formData.telefone || '',
        formData.email || '',
        formData.endereco || '',
        (formData.areaInteresseAdmin || []).join(', '),
        fileUrl,
        formData.observacoesAdmin || ''
      ];
    } else if (tipoVaga === 'docente') {
      rowData = [
        timestamp,
        formData.nomeCompleto || '',
        formData.cpf || '',
        formData.telefone || '',
        formData.email || '',
        formData.endereco || '',
        (formData.areaInteresseDocente || []).join(', '),
        formData.linkLattes || '',
        fileUrl,
        formData.observacoesDocente || ''
      ];
    }
    
    console.log(`[doPost] Dados preparados para inserção na planilha: ${JSON.stringify(rowData)}`);

    // Adiciona os dados à planilha
    sheet.appendRow(rowData);
    
    // Formata a linha recém-adicionada
    const lastRow = sheet.getLastRow();
    const dataRange = sheet.getRange(lastRow, 1, 1, headers.length);
    dataRange.setBorder(false, false, true, false, false, false); // Borda inferior
    
    SpreadsheetApp.flush();
    console.log('[doPost] Dados adicionados à planilha com sucesso.');

    lock.releaseLock();
    console.log('[doPost] Lock liberado.');

    console.log('[doPost] Processo concluído com sucesso. Retornando resposta.');
    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'success', 'message': 'Formulário enviado com sucesso!' }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    console.error('[doPost] Erro durante a execução:', error.toString());
    console.error('[doPost] Stack trace:', error.stack);

    if (lock && lock.hasLock()) {
      try {
        lock.releaseLock();
        console.log('[doPost] Lock liberado após erro.');
      } catch (releaseError) {
        console.error('[doPost] Erro ao liberar o lock após falha principal:', releaseError.toString());
      }
    }

    return ContentService
      .createTextOutput(JSON.stringify({ 'result': 'error', 'message': error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Função para implantar o Web App.
 */
function deployAsWebApp() {
  console.log("Lembre-se de implantar este script como um Web App!");
  console.log("Vá em 'Implantar' -> 'Novo implantação' -> 'Tipo de implantação: Web App'");
  console.log("Execute como: 'Eu'");
  console.log("Quem tem acesso: 'Qualquer um'");
}

/**
 * Função para inicializar a estrutura (criar pastas e planilhas)
 */
function inicializarEstrutura() {
  console.log("--- INICIALIZANDO ESTRUTURA ---");
  
  // Cria todas as pastas e planilhas
  const adminFolderId = getFolderIdByName(CONFIG.pastaDriveAdmin);
  const docentesFolderId = getFolderIdByName(CONFIG.pastaDriveDocentes);
  const adminSpreadsheetId = getSpreadsheetIdByName(CONFIG.planilhaAdmin);
  const docentesSpreadsheetId = getSpreadsheetIdByName(CONFIG.planilhaDocentes);
  
  console.log("--- ESTRUTURA INICIALIZADA COM SUCESSO ---");
  console.log(`Pasta Admin: ${adminFolderId}`);
  console.log(`Pasta Docentes: ${docentesFolderId}`);
  console.log(`Planilha Admin: ${adminSpreadsheetId}`);
  console.log(`Planilha Docentes: ${docentesSpreadsheetId}`);
}

/**
 * Função de teste para simular uma chamada ao doPost.
 */
function testFunction() {
  console.log("--- INICIANDO TESTE MANUAL ---");
  const mockEvent = {
    postData: {
      contents: JSON.stringify({
        tipoVaga: 'docente',
        nomeCompleto: 'Professor Teste da Silva',
        cpf: '123.456.789-00',
        telefone: '(11) 99999-8888',
        email: 'professor@exemplo.com',
        endereco: 'Rua Exemplo, 123 - São Paulo/SP',
        areaInteresseDocente: ['Administração', 'Direito'],
        linkLattes: 'http://lattes.cnpq.br/123456789',
        observacoesDocente: 'Professor com 10 anos de experiência.',
        arquivo: {
          name: "curriculo_professor.pdf",
          type: "application/pdf",
          data: "data:application/pdf;base64,dGVzdGU="
        }
      })
    }
  };

  try {
    const result = doPost(mockEvent);
    console.log("--- TESTE MANUAL CONCLUÍDO ---");
    console.log("Resultado:", result.getContent());
  } catch (e) {
    console.error("--- ERRO NO TESTE MANUAL ---", e.toString(), e.stack);
  }
}

/**
 * Função diária para enviar um resumo das candidaturas recebidas no dia.
 */
function enviarResumoDiario() {
  const timezone = Session.getScriptTimeZone() || 'America/Sao_Paulo';
  const hoje = new Date();
  const inicioDoDia = new Date(hoje.getFullYear(), hoje.getMonth(), hoje.getDate());
  const fimDoDia = new Date(inicioDoDia);
  fimDoDia.setDate(fimDoDia.getDate() + 1);

  const tipos = [
    {
      nome: 'administrativo',
      sheetName: CONFIG.planilhaAdmin,
      email: CONFIG.emailNotificacaoAdmin,
      headers: HEADERS.administrativo
    },
    {
      nome: 'docente',
      sheetName: CONFIG.planilhaDocentes,
      email: CONFIG.emailNotificacaoDocentes,
      headers: HEADERS.docente
    }
  ];

  tipos.forEach(tipo => {
    try {
      if (!tipo.email) {
        console.log(`[enviarResumoDiario] Pulando tipo '${tipo.nome}' por falta de e-mail configurado.`);
        return;
      }

      const planilhaId = getSpreadsheetIdIfExists(tipo.sheetName);
      if (!planilhaId) {
        console.log(`[enviarResumoDiario] Nenhuma planilha encontrada para '${tipo.nome}'.`);
        return;
      }

      const ss = SpreadsheetApp.openById(planilhaId);
      const sheet = ss.getSheetByName(hoje.getFullYear().toString());

      if (!sheet) {
        console.log(`[enviarResumoDiario] Nenhuma aba para o ano atual em '${tipo.nome}'.`);
        return;
      }

      const data = sheet.getDataRange().getValues();
      if (!data || data.length <= 1) {
        console.log(`[enviarResumoDiario] Nenhum dado registrado em '${tipo.nome}'.`);
        return;
      }

      const linhasDoDia = data.slice(1).filter(linha => {
        const timestamp = linha[0] instanceof Date ? linha[0] : new Date(linha[0]);
        if (!(timestamp instanceof Date) || isNaN(timestamp.getTime())) {
          return false;
        }
        return timestamp >= inicioDoDia && timestamp < fimDoDia;
      });

      if (linhasDoDia.length === 0) {
        console.log(`[enviarResumoDiario] Nenhuma candidatura hoje para '${tipo.nome}'.`);
        return;
      }

      const linhasFormatadas = linhasDoDia.map(linha => {
        const campos = linha.map((valor, idx) => {
          if (idx === 0 && valor) {
            const dataValor = valor instanceof Date ? valor : new Date(valor);
            if (dataValor instanceof Date && !isNaN(dataValor.getTime())) {
              return `${tipo.headers[idx]}: ${Utilities.formatDate(dataValor, timezone, 'dd/MM/yyyy HH:mm')}`;
            }
            return `${tipo.headers[idx]}: ${valor}`;
          }
          return `${tipo.headers[idx]}: ${valor || ''}`;
        });
        return campos.join('\n');
      }).join('\n\n');

      const subject = `Resumo diário de candidaturas (${Utilities.formatDate(inicioDoDia, timezone, 'dd/MM/yyyy')}) - ${tipo.nome}`;
      const body = `Foram recebidas ${linhasDoDia.length} candidatura(s) para vagas ${tipo.nome} hoje.\n\n${linhasFormatadas}\n\nConsulte a planilha "${ss.getName()}" (aba ${sheet.getName()}) para mais detalhes.`;

      MailApp.sendEmail(tipo.email, subject, body);
      console.log(`[enviarResumoDiario] Resumo enviado para ${tipo.email} com ${linhasDoDia.length} registro(s).`);
    } catch (error) {
      console.error(`[enviarResumoDiario] Erro ao processar '${tipo.nome}':`, error.toString());
    }
  });
}

/**
 * Função utilitária para criar um gatilho diário automático.
 * Ajuste o horário conforme necessário antes de executar.
 */
function criarGatilhoResumoDiario() {
  const horaEnvio = 18; // Define a hora (0-23) em que o resumo será enviado diariamente
  ScriptApp.newTrigger('enviarResumoDiario')
    .timeBased()
    .atHour(horaEnvio)
    .everyDays(1)
    .inTimezone(Session.getScriptTimeZone())
    .create();
  console.log(`[criarGatilhoResumoDiario] Gatilho criado para envio diário às ${horaEnvio}h.`);
}

/**
 * Função GET para testar se o script está funcionando
 */
function doGet(e) {
  return ContentService.createTextOutput(JSON.stringify({
    status: 'online',
    message: 'Web App do formulário de candidaturas está funcionando',
    timestamp: new Date()
  })).setMimeType(ContentService.MimeType.JSON);
}